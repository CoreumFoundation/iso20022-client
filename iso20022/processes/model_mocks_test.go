// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CoreumFoundation/iso20022-client/iso20022/processes (interfaces: ContractClient,AddressBook,Cryptography,Parser)
//
// Generated by this command:
//
//	mockgen -destination=model_mocks_test.go -package=processes_test . ContractClient,AddressBook,Cryptography,Parser
//

// Package processes_test is a generated GoMock package.
package processes_test

import (
	context "context"
	reflect "reflect"

	client "github.com/CoreumFoundation/coreum/v4/pkg/client"
	addressbook "github.com/CoreumFoundation/iso20022-client/iso20022/addressbook"
	coreum "github.com/CoreumFoundation/iso20022-client/iso20022/coreum"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types0 "github.com/cosmos/cosmos-sdk/crypto/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockContractClient is a mock of ContractClient interface.
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient.
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance.
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// GetContractAddress mocks base method.
func (m *MockContractClient) GetContractAddress() types1.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddress")
	ret0, _ := ret[0].(types1.AccAddress)
	return ret0
}

// GetContractAddress indicates an expected call of GetContractAddress.
func (mr *MockContractClientMockRecorder) GetContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddress", reflect.TypeOf((*MockContractClient)(nil).GetContractAddress))
}

// GetReadMessages mocks base method.
func (m *MockContractClient) GetReadMessages(arg0 context.Context, arg1 types1.AccAddress, arg2 string, arg3 *uint32) ([]coreum.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadMessages", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]coreum.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadMessages indicates an expected call of GetReadMessages.
func (mr *MockContractClientMockRecorder) GetReadMessages(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadMessages", reflect.TypeOf((*MockContractClient)(nil).GetReadMessages), arg0, arg1, arg2, arg3)
}

// GetUnreadMessages mocks base method.
func (m *MockContractClient) GetUnreadMessages(arg0 context.Context, arg1 types1.AccAddress, arg2 *uint32) ([]coreum.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]coreum.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockContractClientMockRecorder) GetUnreadMessages(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockContractClient)(nil).GetUnreadMessages), arg0, arg1, arg2)
}

// IsInitialized mocks base method.
func (m *MockContractClient) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockContractClientMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockContractClient)(nil).IsInitialized))
}

// IssueNFTClass mocks base method.
func (m *MockContractClient) IssueNFTClass(arg0 context.Context, arg1 types1.AccAddress, arg2, arg3, arg4 string) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueNFTClass", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueNFTClass indicates an expected call of IssueNFTClass.
func (mr *MockContractClientMockRecorder) IssueNFTClass(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueNFTClass", reflect.TypeOf((*MockContractClient)(nil).IssueNFTClass), arg0, arg1, arg2, arg3, arg4)
}

// MarkAsRead mocks base method.
func (m *MockContractClient) MarkAsRead(arg0 context.Context, arg1 types1.AccAddress, arg2 uint64) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockContractClientMockRecorder) MarkAsRead(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockContractClient)(nil).MarkAsRead), arg0, arg1, arg2)
}

// MintNFT mocks base method.
func (m *MockContractClient) MintNFT(arg0 context.Context, arg1 types1.AccAddress, arg2, arg3 string, arg4 *types.Any) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintNFT", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintNFT indicates an expected call of MintNFT.
func (mr *MockContractClientMockRecorder) MintNFT(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintNFT", reflect.TypeOf((*MockContractClient)(nil).MintNFT), arg0, arg1, arg2, arg3, arg4)
}

// QueryNFT mocks base method.
func (m *MockContractClient) QueryNFT(arg0 context.Context, arg1, arg2 string) (*types.Any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNFT", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNFT indicates an expected call of QueryNFT.
func (mr *MockContractClientMockRecorder) QueryNFT(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNFT", reflect.TypeOf((*MockContractClient)(nil).QueryNFT), arg0, arg1, arg2)
}

// SendMessage mocks base method.
func (m *MockContractClient) SendMessage(arg0 context.Context, arg1, arg2 types1.AccAddress, arg3 coreum.NFTInfo) (*types1.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types1.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockContractClientMockRecorder) SendMessage(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockContractClient)(nil).SendMessage), arg0, arg1, arg2, arg3)
}

// SetContractAddress mocks base method.
func (m *MockContractClient) SetContractAddress(arg0 types1.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContractAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContractAddress indicates an expected call of SetContractAddress.
func (mr *MockContractClientMockRecorder) SetContractAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContractAddress", reflect.TypeOf((*MockContractClient)(nil).SetContractAddress), arg0)
}

// MockAddressBook is a mock of AddressBook interface.
type MockAddressBook struct {
	ctrl     *gomock.Controller
	recorder *MockAddressBookMockRecorder
}

// MockAddressBookMockRecorder is the mock recorder for MockAddressBook.
type MockAddressBookMockRecorder struct {
	mock *MockAddressBook
}

// NewMockAddressBook creates a new mock instance.
func NewMockAddressBook(ctrl *gomock.Controller) *MockAddressBook {
	mock := &MockAddressBook{ctrl: ctrl}
	mock.recorder = &MockAddressBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressBook) EXPECT() *MockAddressBookMockRecorder {
	return m.recorder
}

// Lookup mocks base method.
func (m *MockAddressBook) Lookup(arg0 addressbook.Party) (*addressbook.Address, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0)
	ret0, _ := ret[0].(*addressbook.Address)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockAddressBookMockRecorder) Lookup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockAddressBook)(nil).Lookup), arg0)
}

// LookupByAccountAddress mocks base method.
func (m *MockAddressBook) LookupByAccountAddress(arg0 string) (*addressbook.Address, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByAccountAddress", arg0)
	ret0, _ := ret[0].(*addressbook.Address)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupByAccountAddress indicates an expected call of LookupByAccountAddress.
func (mr *MockAddressBookMockRecorder) LookupByAccountAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByAccountAddress", reflect.TypeOf((*MockAddressBook)(nil).LookupByAccountAddress), arg0)
}

// Update mocks base method.
func (m *MockAddressBook) Update(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressBookMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressBook)(nil).Update), arg0)
}

// Validate mocks base method.
func (m *MockAddressBook) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAddressBookMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAddressBook)(nil).Validate))
}

// MockCryptography is a mock of Cryptography interface.
type MockCryptography struct {
	ctrl     *gomock.Controller
	recorder *MockCryptographyMockRecorder
}

// MockCryptographyMockRecorder is the mock recorder for MockCryptography.
type MockCryptographyMockRecorder struct {
	mock *MockCryptography
}

// NewMockCryptography creates a new mock instance.
func NewMockCryptography(ctrl *gomock.Controller) *MockCryptography {
	mock := &MockCryptography{ctrl: ctrl}
	mock.recorder = &MockCryptographyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptography) EXPECT() *MockCryptographyMockRecorder {
	return m.recorder
}

// GenerateSharedKey mocks base method.
func (m *MockCryptography) GenerateSharedKey(arg0 types0.PrivKey, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSharedKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSharedKey indicates an expected call of GenerateSharedKey.
func (mr *MockCryptographyMockRecorder) GenerateSharedKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSharedKey", reflect.TypeOf((*MockCryptography)(nil).GenerateSharedKey), arg0, arg1)
}

// GenerateSharedKeyByPrivateKeyName mocks base method.
func (m *MockCryptography) GenerateSharedKeyByPrivateKeyName(arg0 client.Context, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSharedKeyByPrivateKeyName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSharedKeyByPrivateKeyName indicates an expected call of GenerateSharedKeyByPrivateKeyName.
func (mr *MockCryptographyMockRecorder) GenerateSharedKeyByPrivateKeyName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSharedKeyByPrivateKeyName", reflect.TypeOf((*MockCryptography)(nil).GenerateSharedKeyByPrivateKeyName), arg0, arg1, arg2)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ExtractIdentificationFromIsoMessage mocks base method.
func (m *MockParser) ExtractIdentificationFromIsoMessage(arg0 []byte) (*addressbook.Party, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractIdentificationFromIsoMessage", arg0)
	ret0, _ := ret[0].(*addressbook.Party)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractIdentificationFromIsoMessage indicates an expected call of ExtractIdentificationFromIsoMessage.
func (mr *MockParserMockRecorder) ExtractIdentificationFromIsoMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractIdentificationFromIsoMessage", reflect.TypeOf((*MockParser)(nil).ExtractIdentificationFromIsoMessage), arg0)
}
