// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
{{- $targetNS := .TargetNamespace }}
{{- $nsPrefix := .Xmlns.PrefixByUri .TargetNamespace }}
{{- $allXmlns := .Xmlns }}
// Models for {{ $targetNS }}{{ if ne $nsPrefix "" }} with prefix '{{ $nsPrefix }}'{{ end }}
package {{ .GoPackageName }}

import (
	"fmt"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/xmldsig"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	{{- range .GoImportsNeeded }}
		"{{ . }}"
	{{- end }}
)

{{ if .ExportableElements -}}
	// XSD Elements
{{ end -}}
{{ range .ExportableElements }}
	type {{ .GoName }} struct {
		XMLName xml.Name {{- if eq .GoName "Message" -}}`xml:"Message"`{{- end -}}
		{{- if eq .GoName "Message" }}
			Xmlns []xml.Attr `xml:",attr"`
		{{- end -}}
		{{- if .ContainsText }}
			Value {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
		{{- end }}
		{{- range .Attributes }}
			{{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
		{{- end }}
		{{- range .Elements }}
			{{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ $targetNS }} {{ .Name }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
		{{- end }}
	}

	{{ if eq .GoName "Message" }}
		var NamespacePrefixMap = map[string]string{
			{{- range $allXmlns }}
				{{- if and (ne .Prefix "xs") (ne .Prefix "gefeg") }}
					"{{ .Uri }}": "{{ .Prefix }}",
				{{- end }}
			{{- end }}
		}

		func (v *Message) Body() interface{} {
			{{- range .Elements }}
				{{- if ne .GoFieldName "AppHdr" }}
					if v.{{ .GoFieldName }} != nil {
						return v.{{ .GoFieldName }}
					}
				{{- end }}
			{{- end }}
			return nil
		}
	{{ end }}
{{ end }}

{{ if .ExportableComplexTypes -}}
	// XSD ComplexType declarations
{{ end }}
{{ range .ExportableComplexTypes }}
	{{ if eq .GoName "SignatureEnvelope" }}
		{{ template "SignatureEnvelope" . }}
	{{ else if eq .GoName "HdrAndData" }}
	{{ else if eq .GoName "HdrAndDataTCH" }}
	{{ else if eq .GoName "DocumentTCH" }}
	{{ else }}
		type {{ .GoName }} struct {
			{{- if eq .GoName "Document" }}
				XMLName xml.Name
			{{- end }}
			{{- if .ContainsText }}
				Value {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
			{{- end }}
			{{- range .Attributes }}
				{{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
			{{- end }}
			{{- range .Elements }}
				{{- $elemGoForeignModule := .GoForeignModule -}}
				{{- $elemGoTypeName := .GoTypeName -}}
				{{- if or (eq .GoTypeName "ISODate") (eq .GoTypeName "ISODateTime") -}}
					{{- $elemGoForeignModule = "iso." -}}
				{{- else if eq .GoTypeName "ISONormalisedDateTime" -}}
					{{- $elemGoForeignModule = "iso." -}}
					{{- $elemGoTypeName = "ISODateTime" -}}
				{{- else if eq .GoTypeName "Max20000Text" -}}
					{{- $elemGoForeignModule = "iso." -}}
					{{- $elemGoTypeName = "Cdata" -}}
				{{- else if eq .GoTypeName "SignatureEnvelope" -}}
					{{- $elemGoForeignModule = "" -}}
					{{- $elemGoTypeName = "Sgntr" -}}
				{{ end }}
				{{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ $elemGoForeignModule }}{{ $elemGoTypeName }} `xml:"{{ $targetNS }} {{ .Name }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
			{{- end }}
			{{- if .Sequence }}
				{{- range .Sequence.Any }}
					Item {{ if eq .MinOccurs "0" }}*{{ end }}string `xml:",any{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
				{{- end }}
			{{- end }}
		}
	{{ end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
	// XSD SimpleType declarations
{{ end }}
{{ range .ExportableSimpleTypes }}
	{{ if eq .GoName "ActiveCurrencyAndAmountSimpleType" }}
		{{ template "ActiveCurrencyAndAmountSimpleType" . }}
	{{ else if eq .GoName "ActiveOrHistoricCurrencyAndAmountSimpleType" }}
		{{ template "ActiveOrHistoricCurrencyAndAmountSimpleType" . }}
	{{ else if eq .GoName "ISODate" }}
	{{ else if eq .GoName "ISODateTime" }}
	{{ else if eq .GoName "ISONormalisedDateTime" }}
	{{ else if eq .GoName "Max20000Text" }}
	{{ else }}
		type {{ .GoName }} {{ .GoTypeName }}
	{{ end }}

	{{- $simpleType := . -}}
	{{- range .Enums }}
		const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
	{{- end }}
{{ end }}

{{ define "ActiveCurrencyAndAmountSimpleType" }}

	type ActiveCurrencyAndAmountSimpleType iso.Amount
{{ end }}

{{ define "ActiveOrHistoricCurrencyAndAmountSimpleType" }}

	type ActiveOrHistoricCurrencyAndAmountSimpleType iso.Amount
{{ end }}

{{ define "SignatureEnvelope" }}

	type Sgntr struct {
		Signature *xmldsig.Signature `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
	}
{{ end }}
