// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.008.001.09
package pacs_008_001_09

import (
	"fmt"

	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".FIToFICstmrCdtTrf", v.FIToFICstmrCdtTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.IBAN != nil {
		iso.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		iso.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountSchemeName1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmount"

	iso.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	iso.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AddressType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AddressType3Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		iso.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData3"
	if v.Id != nil {
		iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.LEI != nil {
		iso.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		iso.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount38) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount38"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		iso.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Prxy != nil {
		iso.AddError(&errs, baseName+".Prxy", v.Prxy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Charges7"
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	iso.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification3Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	if v.ClrSysId != nil {
		iso.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Contact4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Contact4"
	if v.NmPrfx != nil {
		iso.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		iso.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		iso.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		iso.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		iso.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.EmailPurp != nil {
		iso.AddError(&errs, baseName+".EmailPurp", v.EmailPurp.Validate())
	}
	if v.JobTitl != nil {
		iso.AddError(&errs, baseName+".JobTitl", v.JobTitl.Validate())
	}
	if v.Rspnsblty != nil {
		iso.AddError(&errs, baseName+".Rspnsblty", v.Rspnsblty.Validate())
	}
	if v.Dept != nil {
		iso.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			iso.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if v.PrefrdMtd != nil {
		iso.AddError(&errs, baseName+".PrefrdMtd", v.PrefrdMtd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferMandateData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferMandateData1"
	if v.MndtId != nil {
		iso.AddError(&errs, baseName+".MndtId", v.MndtId.Validate())
	}
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.DtOfSgntr != nil {
		iso.AddError(&errs, baseName+".DtOfSgntr", v.DtOfSgntr.Validate())
	}
	if v.DtOfVrfctn != nil {
		iso.AddError(&errs, baseName+".DtOfVrfctn", v.DtOfVrfctn.Validate())
	}
	if v.ElctrncSgntr != nil {
		iso.AddError(&errs, baseName+".ElctrncSgntr", v.ElctrncSgntr.Validate())
	}
	if v.FrstPmtDt != nil {
		iso.AddError(&errs, baseName+".FrstPmtDt", v.FrstPmtDt.Validate())
	}
	if v.FnlPmtDt != nil {
		iso.AddError(&errs, baseName+".FnlPmtDt", v.FnlPmtDt.Validate())
	}
	if v.Frqcy != nil {
		iso.AddError(&errs, baseName+".Frqcy", v.Frqcy.Validate())
	}
	if v.Rsn != nil {
		iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction43) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction43"
	iso.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	if v.PmtTpInf != nil {
		iso.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	iso.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		iso.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.SttlmPrty != nil {
		iso.AddError(&errs, baseName+".SttlmPrty", v.SttlmPrty.Validate())
	}
	if v.SttlmTmIndctn != nil {
		iso.AddError(&errs, baseName+".SttlmTmIndctn", v.SttlmTmIndctn.Validate())
	}
	if v.SttlmTmReq != nil {
		iso.AddError(&errs, baseName+".SttlmTmReq", v.SttlmTmReq.Validate())
	}
	if v.AccptncDtTm != nil {
		iso.AddError(&errs, baseName+".AccptncDtTm", v.AccptncDtTm.Validate())
	}
	if v.PoolgAdjstmntDt != nil {
		iso.AddError(&errs, baseName+".PoolgAdjstmntDt", v.PoolgAdjstmntDt.Validate())
	}
	if v.InstdAmt != nil {
		iso.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if v.XchgRate != nil {
		iso.AddError(&errs, baseName+".XchgRate", v.XchgRate.Validate())
	}
	iso.AddError(&errs, baseName+".ChrgBr", v.ChrgBr.Validate())
	if v.ChrgsInf != nil {
		for indx := range v.ChrgsInf {
			iso.AddError(&errs, baseName+".ChrgsInf", v.ChrgsInf[indx].Validate())
		}
	}
	if v.MndtRltdInf != nil {
		iso.AddError(&errs, baseName+".MndtRltdInf", v.MndtRltdInf.Validate())
	}
	if v.PrvsInstgAgt1 != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt1", v.PrvsInstgAgt1.Validate())
	}
	if v.PrvsInstgAgt1Acct != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt1Acct", v.PrvsInstgAgt1Acct.Validate())
	}
	if v.PrvsInstgAgt2 != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt2", v.PrvsInstgAgt2.Validate())
	}
	if v.PrvsInstgAgt2Acct != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt2Acct", v.PrvsInstgAgt2Acct.Validate())
	}
	if v.PrvsInstgAgt3 != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt3", v.PrvsInstgAgt3.Validate())
	}
	if v.PrvsInstgAgt3Acct != nil {
		iso.AddError(&errs, baseName+".PrvsInstgAgt3Acct", v.PrvsInstgAgt3Acct.Validate())
	}
	if v.InstgAgt != nil {
		iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	}
	if v.InstdAgt != nil {
		iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	}
	if v.IntrmyAgt1 != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt1", v.IntrmyAgt1.Validate())
	}
	if v.IntrmyAgt1Acct != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt1Acct", v.IntrmyAgt1Acct.Validate())
	}
	if v.IntrmyAgt2 != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt2", v.IntrmyAgt2.Validate())
	}
	if v.IntrmyAgt2Acct != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt2Acct", v.IntrmyAgt2Acct.Validate())
	}
	if v.IntrmyAgt3 != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt3", v.IntrmyAgt3.Validate())
	}
	if v.IntrmyAgt3Acct != nil {
		iso.AddError(&errs, baseName+".IntrmyAgt3Acct", v.IntrmyAgt3Acct.Validate())
	}
	if v.UltmtDbtr != nil {
		iso.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.InitgPty != nil {
		iso.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	}
	iso.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		iso.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	iso.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	if v.DbtrAgtAcct != nil {
		iso.AddError(&errs, baseName+".DbtrAgtAcct", v.DbtrAgtAcct.Validate())
	}
	iso.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	if v.CdtrAgtAcct != nil {
		iso.AddError(&errs, baseName+".CdtrAgtAcct", v.CdtrAgtAcct.Validate())
	}
	iso.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	if v.CdtrAcct != nil {
		iso.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		iso.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.InstrForCdtrAgt != nil {
		for indx := range v.InstrForCdtrAgt {
			iso.AddError(&errs, baseName+".InstrForCdtrAgt", v.InstrForCdtrAgt[indx].Validate())
		}
	}
	if v.InstrForNxtAgt != nil {
		for indx := range v.InstrForNxtAgt {
			iso.AddError(&errs, baseName+".InstrForNxtAgt", v.InstrForNxtAgt[indx].Validate())
		}
	}
	if v.Purp != nil {
		iso.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RgltryRptg != nil {
		for indx := range v.RgltryRptg {
			iso.AddError(&errs, baseName+".RgltryRptg", v.RgltryRptg[indx].Validate())
		}
	}
	if v.Tax != nil {
		iso.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if v.RltdRmtInf != nil {
		for indx := range v.RltdRmtInf {
			iso.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf[indx].Validate())
		}
	}
	if v.RmtInf != nil {
		iso.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			iso.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		iso.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	iso.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth1"
	iso.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		iso.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	iso.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	iso.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriod2"
	iso.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	iso.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountAndType1"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		iso.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		iso.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineIdentification1"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		iso.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		iso.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineInformation1"
	for indx := range v.Id {
		iso.AddError(&errs, baseName+".Id", v.Id[indx].Validate())
	}
	if v.Desc != nil {
		iso.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if v.Amt != nil {
		iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1"
	iso.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFICustomerCreditTransferV09) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FIToFICustomerCreditTransferV09"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.CdtTrfTxInf {
		iso.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf[indx].Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			iso.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialIdentificationSchemeName1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	if v.BICFI != nil {
		iso.AddError(&errs, baseName+".BICFI", v.BICFI.Validate())
	}
	if v.ClrSysMmbId != nil {
		iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.LEI != nil {
		iso.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		iso.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Othr != nil {
		iso.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Frequency36Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Frequency36Choice"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Prd != nil {
		iso.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.PtInTm != nil {
		iso.AddError(&errs, baseName+".PtInTm", v.PtInTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FrequencyAndMoment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FrequencyAndMoment1"
	iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	iso.AddError(&errs, baseName+".PtInTm", v.PtInTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FrequencyPeriod1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FrequencyPeriod1"
	iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	iso.AddError(&errs, baseName+".CntPerPrd", v.CntPerPrd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Garnishment3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Garnishment3"
	iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.Grnshee != nil {
		iso.AddError(&errs, baseName+".Grnshee", v.Grnshee.Validate())
	}
	if v.GrnshmtAdmstr != nil {
		iso.AddError(&errs, baseName+".GrnshmtAdmstr", v.GrnshmtAdmstr.Validate())
	}
	if v.RefNb != nil {
		iso.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Dt != nil {
		iso.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.RmtdAmt != nil {
		iso.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if v.FmlyMdclInsrncInd != nil {
		iso.AddError(&errs, baseName+".FmlyMdclInsrncInd", v.FmlyMdclInsrncInd.Validate())
	}
	if v.MplyeeTermntnInd != nil {
		iso.AddError(&errs, baseName+".MplyeeTermntnInd", v.MplyeeTermntnInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1"
	iso.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		iso.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericFinancialIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericFinancialIdentification1"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		iso.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification30) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification30"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	if v.SchmeNm != nil {
		iso.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		iso.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		iso.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader93) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader93"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if v.BtchBookg != nil {
		iso.AddError(&errs, baseName+".BtchBookg", v.BtchBookg.Validate())
	}
	iso.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	if v.CtrlSum != nil {
		iso.AddError(&errs, baseName+".CtrlSum", v.CtrlSum.Validate())
	}
	if v.TtlIntrBkSttlmAmt != nil {
		iso.AddError(&errs, baseName+".TtlIntrBkSttlmAmt", v.TtlIntrBkSttlmAmt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		iso.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	iso.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if v.PmtTpInf != nil {
		iso.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	if v.InstgAgt != nil {
		iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	}
	if v.InstdAgt != nil {
		iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InstructionForCreditorAgent3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InstructionForCreditorAgent3"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.InstrInf != nil {
		iso.AddError(&errs, baseName+".InstrInf", v.InstrInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InstructionForNextAgent1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InstructionForNextAgent1"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.InstrInf != nil {
		iso.AddError(&errs, baseName+".InstrInf", v.InstrInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MandateClassification1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MandateClassification1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MandateSetupReason1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MandateSetupReason1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MandateTypeInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MandateTypeInformation2"
	if v.SvcLvl != nil {
		iso.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	}
	if v.LclInstrm != nil {
		iso.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.CtgyPurp != nil {
		iso.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if v.Clssfctn != nil {
		iso.AddError(&errs, baseName+".Clssfctn", v.Clssfctn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress16"
	iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	iso.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification29"
	if v.AnyBIC != nil {
		iso.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.LEI != nil {
		iso.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			iso.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OtherContact1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OtherContact1"
	iso.AddError(&errs, baseName+".ChanlTp", v.ChanlTp.Validate())
	if v.Id != nil {
		iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party38Choice"
	if v.OrgId != nil {
		iso.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		iso.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135"
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		iso.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		iso.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		iso.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification13"
	if v.InstrId != nil {
		iso.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	iso.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	if v.TxId != nil {
		iso.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.UETR != nil {
		iso.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if v.ClrSysRef != nil {
		iso.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation28"
	if v.InstrPrty != nil {
		iso.AddError(&errs, baseName+".InstrPrty", v.InstrPrty.Validate())
	}
	if v.ClrChanl != nil {
		iso.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if v.SvcLvl != nil {
		for indx := range v.SvcLvl {
			iso.AddError(&errs, baseName+".SvcLvl", v.SvcLvl[indx].Validate())
		}
	}
	if v.LclInstrm != nil {
		iso.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.CtgyPurp != nil {
		iso.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification13"
	if v.DtAndPlcOfBirth != nil {
		iso.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			iso.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress24"
	if v.AdrTp != nil {
		iso.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		iso.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		iso.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		iso.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		iso.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		iso.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		iso.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		iso.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		iso.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	if v.PstCd != nil {
		iso.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		iso.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.TwnLctnNm != nil {
		iso.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		iso.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		iso.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		iso.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			iso.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountIdentification1"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation7"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		iso.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		iso.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if v.LineDtls != nil {
		for indx := range v.LineDtls {
			iso.AddError(&errs, baseName+".LineDtls", v.LineDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType3Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType4"
	iso.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		iso.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RegulatoryAuthority2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RegulatoryAuthority2"
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Ctry != nil {
		iso.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RegulatoryReporting3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RegulatoryReporting3"
	if v.DbtCdtRptgInd != nil {
		iso.AddError(&errs, baseName+".DbtCdtRptgInd", v.DbtCdtRptgInd.Validate())
	}
	if v.Authrty != nil {
		iso.AddError(&errs, baseName+".Authrty", v.Authrty.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			iso.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount2"
	if v.DuePyblAmt != nil {
		iso.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			iso.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		iso.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			iso.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			iso.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		iso.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount3"
	if v.DuePyblAmt != nil {
		iso.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			iso.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		iso.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			iso.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			iso.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		iso.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation16"
	if v.Ustrd != nil {
		for indx := range v.Ustrd {
			iso.AddError(&errs, baseName+".Ustrd", v.Ustrd[indx].Validate())
		}
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			iso.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation7"
	if v.RmtId != nil {
		iso.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnDtls != nil {
		for indx := range v.RmtLctnDtls {
			iso.AddError(&errs, baseName+".RmtLctnDtls", v.RmtLctnDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocationData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocationData1"
	iso.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	if v.ElctrncAdr != nil {
		iso.AddError(&errs, baseName+".ElctrncAdr", v.ElctrncAdr.Validate())
	}
	if v.PstlAdr != nil {
		iso.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementDateTimeIndication1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementDateTimeIndication1"
	if v.DbtDtTm != nil {
		iso.AddError(&errs, baseName+".DbtDtTm", v.DbtDtTm.Validate())
	}
	if v.CdtDtTm != nil {
		iso.AddError(&errs, baseName+".CdtDtTm", v.CdtDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInstruction7"
	iso.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	if v.SttlmAcct != nil {
		iso.AddError(&errs, baseName+".SttlmAcct", v.SttlmAcct.Validate())
	}
	if v.ClrSys != nil {
		iso.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	}
	if v.InstgRmbrsmntAgt != nil {
		iso.AddError(&errs, baseName+".InstgRmbrsmntAgt", v.InstgRmbrsmntAgt.Validate())
	}
	if v.InstgRmbrsmntAgtAcct != nil {
		iso.AddError(&errs, baseName+".InstgRmbrsmntAgtAcct", v.InstgRmbrsmntAgtAcct.Validate())
	}
	if v.InstdRmbrsmntAgt != nil {
		iso.AddError(&errs, baseName+".InstdRmbrsmntAgt", v.InstdRmbrsmntAgt.Validate())
	}
	if v.InstdRmbrsmntAgtAcct != nil {
		iso.AddError(&errs, baseName+".InstdRmbrsmntAgtAcct", v.InstdRmbrsmntAgtAcct.Validate())
	}
	if v.ThrdRmbrsmntAgt != nil {
		iso.AddError(&errs, baseName+".ThrdRmbrsmntAgt", v.ThrdRmbrsmntAgt.Validate())
	}
	if v.ThrdRmbrsmntAgtAcct != nil {
		iso.AddError(&errs, baseName+".ThrdRmbrsmntAgtAcct", v.ThrdRmbrsmntAgtAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementTimeRequest2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementTimeRequest2"
	if v.CLSTm != nil {
		iso.AddError(&errs, baseName+".CLSTm", v.CLSTm.Validate())
	}
	if v.TillTm != nil {
		iso.AddError(&errs, baseName+".TillTm", v.TillTm.Validate())
	}
	if v.FrTm != nil {
		iso.AddError(&errs, baseName+".FrTm", v.FrTm.Validate())
	}
	if v.RjctTm != nil {
		iso.AddError(&errs, baseName+".RjctTm", v.RjctTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRegulatoryReporting3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRegulatoryReporting3"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Dt != nil {
		iso.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.Ctry != nil {
		iso.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Amt != nil {
		iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if v.Inf != nil {
		for indx := range v.Inf {
			iso.AddError(&errs, baseName+".Inf", v.Inf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation16"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			iso.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		iso.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		iso.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		iso.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		iso.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.TaxRmt != nil {
		iso.AddError(&errs, baseName+".TaxRmt", v.TaxRmt.Validate())
	}
	if v.GrnshmtRmt != nil {
		iso.AddError(&errs, baseName+".GrnshmtRmt", v.GrnshmtRmt.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			iso.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SupplementaryData1"
	if v.PlcAndNm != nil {
		iso.AddError(&errs, baseName+".PlcAndNm", v.PlcAndNm.Validate())
	}
	iso.AddError(&errs, baseName+".Envlp", v.Envlp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryDataEnvelope1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmount2"
	if v.Rate != nil {
		iso.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.TaxblBaseAmt != nil {
		iso.AddError(&errs, baseName+".TaxblBaseAmt", v.TaxblBaseAmt.Validate())
	}
	if v.TtlAmt != nil {
		iso.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			iso.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountAndType1"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountType1Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAuthorisation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAuthorisation1"
	if v.Titl != nil {
		iso.AddError(&errs, baseName+".Titl", v.Titl.Validate())
	}
	if v.Nm != nil {
		iso.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation7"
	if v.Cdtr != nil {
		iso.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		iso.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.UltmtDbtr != nil {
		iso.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.AdmstnZone != nil {
		iso.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		iso.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		iso.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		iso.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		iso.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		iso.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		iso.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			iso.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation8"
	if v.Cdtr != nil {
		iso.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		iso.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.AdmstnZone != nil {
		iso.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		iso.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		iso.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		iso.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		iso.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		iso.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		iso.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			iso.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty1"
	if v.TaxId != nil {
		iso.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		iso.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		iso.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty2"
	if v.TaxId != nil {
		iso.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		iso.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		iso.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.Authstn != nil {
		iso.AddError(&errs, baseName+".Authstn", v.Authstn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxPeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxPeriod2"
	if v.Yr != nil {
		iso.AddError(&errs, baseName+".Yr", v.Yr.Validate())
	}
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.FrToDt != nil {
		iso.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecord2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecord2"
	if v.Tp != nil {
		iso.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ctgy != nil {
		iso.AddError(&errs, baseName+".Ctgy", v.Ctgy.Validate())
	}
	if v.CtgyDtls != nil {
		iso.AddError(&errs, baseName+".CtgyDtls", v.CtgyDtls.Validate())
	}
	if v.DbtrSts != nil {
		iso.AddError(&errs, baseName+".DbtrSts", v.DbtrSts.Validate())
	}
	if v.CertId != nil {
		iso.AddError(&errs, baseName+".CertId", v.CertId.Validate())
	}
	if v.FrmsCd != nil {
		iso.AddError(&errs, baseName+".FrmsCd", v.FrmsCd.Validate())
	}
	if v.Prd != nil {
		iso.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.TaxAmt != nil {
		iso.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AddtlInf != nil {
		iso.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecordDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecordDetails2"
	if v.Prd != nil {
		iso.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyCode) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AddressType2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICDec2014Identifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICFIDec2014Identifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BaseOneRate) Validate() error {
	if err := iso.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := iso.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v BatchBookingIndicator) Validate() error {
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v ClearingChannel2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "RTGS", "RTNS", "MPNS", "BOOK"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := iso.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := iso.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType6Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT", "PUOR"); err != nil {
		return err
	}
	return nil
}

func (v Exact2NumericText) Validate() error {
	if err := iso.ValidatePattern(string(v), `[0-9]{2}`); err != nil {
		return err
	}
	return nil
}

func (v Exact4AlphaNumericText) Validate() error {
	if err := iso.ValidatePattern(string(v), `[a-zA-Z0-9]{4}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalAccountIdentification1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashAccountType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashClearingSystem1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 3); err != nil {
		return err
	}
	return nil
}

func (v ExternalCategoryPurpose1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 5); err != nil {
		return err
	}
	return nil
}

func (v ExternalCreditorAgentInstruction1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDiscountAmountType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDocumentLineType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstitutionIdentification1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalGarnishmentType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalLocalInstrument1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v ExternalMandateSetupReason1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalProxyAccountType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTaxAmountType1Code) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Frequency6Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "YEAR", "MNTH", "QURT", "MIAN", "WEEK", "DAIL", "ADHO", "INDA", "FRTN"); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v ISOTime) Validate() error {
	return nil
}

func (v Instruction4Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "PHOA", "TELA"); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v MandateClassification1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "FIXE", "USGB", "VARI"); err != nil {
		return err
	}
	return nil
}

func (v Max10KBinary) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 10240); err != nil {
		return err
	}
	return nil
}

func (v Max10Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 10); err != nil {
		return err
	}
	return nil
}

func (v Max128Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 128); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := iso.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max350Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 350); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "DOCT", "MADM", "MISS", "MIST", "MIKS"); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := iso.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := iso.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := iso.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := iso.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := iso.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v PreferredContactMethod1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "LETT", "MAIL", "PHON", "FAXX", "CELL"); err != nil {
		return err
	}
	return nil
}

func (v Priority2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v Priority3Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "URGT", "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v RegulatoryReportingType1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "CRED", "DEBT", "BOTH"); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST", "SMSM"); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "INDA", "INGA", "COVE", "CLRG", "TDSO", "TDSA"); err != nil {
		return err
	}
	return nil
}

func (v TaxRecordPeriod1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "MM01", "MM02", "MM03", "MM04", "MM05", "MM06", "MM07", "MM08", "MM09", "MM10", "MM11", "MM12", "QTR1", "QTR2", "QTR3", "QTR4", "HLF1", "HLF2"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
