// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admn.006.001.01
package admn_006_001_01

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4ADMN"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2ADMN"
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".AdmnEchoResp", v.AdmnEchoResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoResp) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoResp"
	iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	iso.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	iso.AddError(&errs, baseName+".FnctnCd", v.FnctnCd.Validate())
	iso.AddError(&errs, baseName+".TxSts", v.TxSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoResponse) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoResponse"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".EchoResponse", v.EchoResponse.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoResponseTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoResponseTCH"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".EchoResponse", v.EchoResponse.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7ADMN"
	iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdr"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdrTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdrTCH"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v EchoCode) Validate() error {
	if err := iso.ValidatePattern(string(v), `[0-9]{1,3}`); err != nil {
		return err
	}
	if err := iso.ValidateEnumeration(string(v), "731"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := iso.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])){2})[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Min11Max11Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 11); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 11); err != nil {
		return err
	}
	return nil
}

func (v TransactionIndividualStatus3CodeEcho) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "ACTC"); err != nil {
		return err
	}
	return nil
}
