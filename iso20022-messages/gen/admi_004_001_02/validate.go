// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.004.001.02
package admi_004_001_02

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".SysEvtNtfctn", v.SysEvtNtfctn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Event2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event2"
	iso.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	for indx := range v.EvtParam {
		iso.AddError(&errs, baseName+".EvtParam", v.EvtParam[indx].Validate())
	}
	if v.EvtDesc != nil {
		iso.AddError(&errs, baseName+".EvtDesc", v.EvtDesc.Validate())
	}
	iso.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Event2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event2TCH"
	iso.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	for indx := range v.EvtParam {
		iso.AddError(&errs, baseName+".EvtParam", v.EvtParam[indx].Validate())
	}
	if v.EvtDesc != nil {
		iso.AddError(&errs, baseName+".EvtDesc", v.EvtDesc.Validate())
	}
	iso.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventNotificationV02) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventNotificationV02"
	iso.AddError(&errs, baseName+".EvtInf", v.EvtInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventNotificationV02TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventNotificationV02TCH"
	iso.AddError(&errs, baseName+".EvtInf", v.EvtInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max1000Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 1000); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4AlphaNumericText) Validate() error {
	if err := iso.ValidatePattern(string(v), `[a-zA-Z0-9]{1,4}`); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}
