// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:head.002.001.01
package head_002_001_01

import (
	"fmt"

	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v ApplicationSpecifics1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ApplicationSpecifics1"
	if v.SysUsr != nil {
		iso.AddError(&errs, baseName+".SysUsr", v.SysUsr.Validate())
	}
	if v.Sgntr != nil {
	}
	iso.AddError(&errs, baseName+".TtlNbOfDocs", v.TtlNbOfDocs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessFileHeaderV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessFileHeaderV01"
	iso.AddError(&errs, baseName+".PyldDesc", v.PyldDesc.Validate())
	if v.Pyld != nil {
		for indx := range v.Pyld {
			iso.AddError(&errs, baseName+".Pyld", v.Pyld[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LaxPayload) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ManifestData2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ManifestData2"
	iso.AddError(&errs, baseName+".DocTp", v.DocTp.Validate())
	iso.AddError(&errs, baseName+".NbOfDocs", v.NbOfDocs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PayloadData2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PayloadData2"
	iso.AddError(&errs, baseName+".PyldIdr", v.PyldIdr.Validate())
	iso.AddError(&errs, baseName+".CreDtAndTm", v.CreDtAndTm.Validate())
	if v.PssblDplctFlg != nil {
		iso.AddError(&errs, baseName+".PssblDplctFlg", v.PssblDplctFlg.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PayloadDescription2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PayloadDescription2"
	iso.AddError(&errs, baseName+".PyldData", v.PyldData.Validate())
	if v.ApplSpcfcs != nil {
		iso.AddError(&errs, baseName+".ApplSpcfcs", v.ApplSpcfcs.Validate())
	}
	iso.AddError(&errs, baseName+".PyldTp", v.PyldTp.Validate())
	if v.MnfstData != nil {
		for indx := range v.MnfstData {
			iso.AddError(&errs, baseName+".MnfstData", v.MnfstData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max140Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max256Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 256); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := iso.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := iso.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}
