// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Models for urn:iso
package messages

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/head_001_001_01"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/head_001_001_02"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/head_001_001_04"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/head_002_001_01"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_07"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_08"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_10"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_11"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_12"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_002_001_14"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_003_001_08"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_003_001_11"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_004_001_10"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_004_001_13"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_007_001_10"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_007_001_13"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_008_001_06"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_008_001_08"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_008_001_09"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_008_001_12"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_009_001_08"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_009_001_09"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_009_001_11"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_010_001_04"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_010_001_06"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_028_001_03"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_028_001_04"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_028_001_06"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/pacs_029_001_02"
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/gen/supl_xxx_001_01"
)

// Element interface for ISO 20022
type Iso20022Message interface {
	// Validate will be process validation check of document
	Validate() error
}
type ConstructorFunc func() Iso20022Message
type ConstructorWithUrn struct {
	Constructor ConstructorFunc
	Urn         string
}

func GetMessageConstructors() (map[string]ConstructorFunc, map[string][]ConstructorWithUrn) {
	var urn string
	var list []ConstructorWithUrn
	var exists bool
	urnMap := make(map[string]ConstructorFunc)
	messagesMap := make(map[string][]ConstructorWithUrn)

	urn = "urn:iso:std:iso:20022:tech:xsd:supl.xxx.001.01"
	urnMap[urn] = func() Iso20022Message { return &supl_xxx_001_01.CryptoCurrencyAndAmountType{} }
	list, exists = messagesMap["CryptoCurrencyAndAmount"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &supl_xxx_001_01.CryptoCurrencyAndAmountType{} },
		Urn:         urn,
	})
	messagesMap["CryptoCurrencyAndAmount"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:head.001.001.01"
	urnMap[urn] = func() Iso20022Message { return &head_001_001_01.BusinessApplicationHeaderV01{} }
	list, exists = messagesMap["AppHdr11"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &head_001_001_01.BusinessApplicationHeaderV01{} },
		Urn:         urn,
	})
	messagesMap["AppHdr11"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:head.001.001.02"
	urnMap[urn] = func() Iso20022Message { return &head_001_001_02.BusinessApplicationHeaderV02{} }
	list, exists = messagesMap["AppHdr12"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &head_001_001_02.BusinessApplicationHeaderV02{} },
		Urn:         urn,
	})
	messagesMap["AppHdr12"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:head.001.001.04"
	urnMap[urn] = func() Iso20022Message { return &head_001_001_04.BusinessApplicationHeaderV04{} }
	list, exists = messagesMap["AppHdr14"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &head_001_001_04.BusinessApplicationHeaderV04{} },
		Urn:         urn,
	})
	messagesMap["AppHdr14"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:head.002.001.01"
	urnMap[urn] = func() Iso20022Message { return &head_002_001_01.BusinessFileHeaderV01{} }
	list, exists = messagesMap["AppHdr21"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &head_002_001_01.BusinessFileHeaderV01{} },
		Urn:         urn,
	})
	messagesMap["AppHdr21"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.06"
	urnMap[urn] = func() Iso20022Message { return &pacs_008_001_06.FIToFICustomerCreditTransferV06{} }
	list, exists = messagesMap["FIToFICstmrCdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_008_001_06.FIToFICustomerCreditTransferV06{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrCdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08"
	urnMap[urn] = func() Iso20022Message { return &pacs_008_001_08.FIToFICustomerCreditTransferV08{} }
	list, exists = messagesMap["FIToFICstmrCdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_008_001_08.FIToFICustomerCreditTransferV08{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrCdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.09"
	urnMap[urn] = func() Iso20022Message { return &pacs_008_001_09.FIToFICustomerCreditTransferV09{} }
	list, exists = messagesMap["FIToFICstmrCdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_008_001_09.FIToFICustomerCreditTransferV09{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrCdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.12"
	urnMap[urn] = func() Iso20022Message { return &pacs_008_001_12.FIToFICustomerCreditTransferV12{} }
	list, exists = messagesMap["FIToFICstmrCdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_008_001_12.FIToFICustomerCreditTransferV12{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrCdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.07"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_07.FIToFIPaymentStatusReportV07{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_07.FIToFIPaymentStatusReportV07{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.08"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_08.FIToFIPaymentStatusReportV08{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_08.FIToFIPaymentStatusReportV08{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_10.FIToFIPaymentStatusReportV10{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_10.FIToFIPaymentStatusReportV10{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.11"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_11.FIToFIPaymentStatusReportV11{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_11.FIToFIPaymentStatusReportV11{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.12"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_12.FIToFIPaymentStatusReportV12{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_12.FIToFIPaymentStatusReportV12{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.14"
	urnMap[urn] = func() Iso20022Message { return &pacs_002_001_14.FIToFIPaymentStatusReportV14{} }
	list, exists = messagesMap["FIToFIPmtStsRpt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_002_001_14.FIToFIPaymentStatusReportV14{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsRpt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.08"
	urnMap[urn] = func() Iso20022Message { return &pacs_003_001_08.FIToFICustomerDirectDebitV08{} }
	list, exists = messagesMap["FIToFICstmrDrctDbt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_003_001_08.FIToFICustomerDirectDebitV08{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrDrctDbt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.11"
	urnMap[urn] = func() Iso20022Message { return &pacs_003_001_11.FIToFICustomerDirectDebitV11{} }
	list, exists = messagesMap["FIToFICstmrDrctDbt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_003_001_11.FIToFICustomerDirectDebitV11{} },
		Urn:         urn,
	})
	messagesMap["FIToFICstmrDrctDbt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.08"
	urnMap[urn] = func() Iso20022Message { return &pacs_009_001_08.FinancialInstitutionCreditTransferV08{} }
	list, exists = messagesMap["FICdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_009_001_08.FinancialInstitutionCreditTransferV08{} },
		Urn:         urn,
	})
	messagesMap["FICdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.09"
	urnMap[urn] = func() Iso20022Message { return &pacs_009_001_09.FinancialInstitutionCreditTransferV09{} }
	list, exists = messagesMap["FICdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_009_001_09.FinancialInstitutionCreditTransferV09{} },
		Urn:         urn,
	})
	messagesMap["FICdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.11"
	urnMap[urn] = func() Iso20022Message { return &pacs_009_001_11.FinancialInstitutionCreditTransferV11{} }
	list, exists = messagesMap["FICdtTrf"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_009_001_11.FinancialInstitutionCreditTransferV11{} },
		Urn:         urn,
	})
	messagesMap["FICdtTrf"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.010.001.04"
	urnMap[urn] = func() Iso20022Message { return &pacs_010_001_04.FinancialInstitutionDirectDebitV04{} }
	list, exists = messagesMap["FIDrctDbt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_010_001_04.FinancialInstitutionDirectDebitV04{} },
		Urn:         urn,
	})
	messagesMap["FIDrctDbt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.010.001.06"
	urnMap[urn] = func() Iso20022Message { return &pacs_010_001_06.FinancialInstitutionDirectDebitV06{} }
	list, exists = messagesMap["FIDrctDbt"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_010_001_06.FinancialInstitutionDirectDebitV06{} },
		Urn:         urn,
	})
	messagesMap["FIDrctDbt"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.10"
	urnMap[urn] = func() Iso20022Message { return &pacs_004_001_10.PaymentReturnV10{} }
	list, exists = messagesMap["PmtRtr"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_004_001_10.PaymentReturnV10{} },
		Urn:         urn,
	})
	messagesMap["PmtRtr"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.13"
	urnMap[urn] = func() Iso20022Message { return &pacs_004_001_13.PaymentReturnV13{} }
	list, exists = messagesMap["PmtRtr"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_004_001_13.PaymentReturnV13{} },
		Urn:         urn,
	})
	messagesMap["PmtRtr"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.10"
	urnMap[urn] = func() Iso20022Message { return &pacs_007_001_10.FIToFIPaymentReversalV10{} }
	list, exists = messagesMap["FIToFIPmtRvsl"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_007_001_10.FIToFIPaymentReversalV10{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtRvsl"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.13"
	urnMap[urn] = func() Iso20022Message { return &pacs_007_001_13.FIToFIPaymentReversalV13{} }
	list, exists = messagesMap["FIToFIPmtRvsl"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_007_001_13.FIToFIPaymentReversalV13{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtRvsl"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.03"
	urnMap[urn] = func() Iso20022Message { return &pacs_028_001_03.FIToFIPaymentStatusRequestV03{} }
	list, exists = messagesMap["FIToFIPmtStsReq"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_028_001_03.FIToFIPaymentStatusRequestV03{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsReq"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.04"
	urnMap[urn] = func() Iso20022Message { return &pacs_028_001_04.FIToFIPaymentStatusRequestV04{} }
	list, exists = messagesMap["FIToFIPmtStsReq"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_028_001_04.FIToFIPaymentStatusRequestV04{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsReq"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.06"
	urnMap[urn] = func() Iso20022Message { return &pacs_028_001_06.FIToFIPaymentStatusRequestV06{} }
	list, exists = messagesMap["FIToFIPmtStsReq"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_028_001_06.FIToFIPaymentStatusRequestV06{} },
		Urn:         urn,
	})
	messagesMap["FIToFIPmtStsReq"] = list

	urn = "urn:iso:std:iso:20022:tech:xsd:pacs.029.001.02"
	urnMap[urn] = func() Iso20022Message { return &pacs_029_001_02.MultilateralSettlementRequestV02{} }
	list, exists = messagesMap["MulSttlmReq"]
	if !exists {
		list = make([]ConstructorWithUrn, 0)
	}
	list = append(list, ConstructorWithUrn{
		Constructor: func() Iso20022Message { return &pacs_029_001_02.MultilateralSettlementRequestV02{} },
		Urn:         urn,
	})
	messagesMap["MulSttlmReq"] = list

	return urnMap, messagesMap
}
