// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.029.001.09
package camt_029_001_09

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	iso.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6TCH"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReason3Choice"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason3ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReason3ChoiceTCH"
	if v.Cd != nil {
		iso.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReason4"
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason4TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReason4TCH"
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	iso.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5TCH"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	iso.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	iso.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	iso.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5TCH"
	iso.AddError(&errs, baseName+".Id", v.Id.Validate())
	iso.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	iso.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Charges7"
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	iso.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Charges7TCH"
	iso.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	iso.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2TCH"
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".RsltnOfInvstgtn", v.RsltnOfInvstgtn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18TCH"
	iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatus5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationStatus5Choice"
	if v.Conf != nil {
		iso.AddError(&errs, baseName+".Conf", v.Conf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader14) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupHeader14"
	iso.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	iso.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	iso.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	iso.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if v.CxlStsRsnInf != nil {
		iso.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader14TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupHeader14TCH"
	iso.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	iso.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	iso.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	iso.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if v.CxlStsRsnInf != nil {
		iso.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice"
	if v.Agt != nil {
		iso.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40ChoiceTCH"
	if v.Agt != nil {
		iso.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction102) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransaction102"
	if v.CxlStsId != nil {
		iso.AddError(&errs, baseName+".CxlStsId", v.CxlStsId.Validate())
	}
	if v.OrgnlUETR != nil {
		iso.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	if v.RsltnRltdInf != nil {
		iso.AddError(&errs, baseName+".RsltnRltdInf", v.RsltnRltdInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction102TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransaction102TCH"
	if v.CxlStsId != nil {
		iso.AddError(&errs, baseName+".CxlStsId", v.CxlStsId.Validate())
	}
	if v.OrgnlUETR != nil {
		iso.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	if v.RsltnRltdInf != nil {
		iso.AddError(&errs, baseName+".RsltnRltdInf", v.RsltnRltdInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionData1"
	iso.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		iso.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.ClrChanl != nil {
		iso.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if v.Chrgs != nil {
		iso.AddError(&errs, baseName+".Chrgs", v.Chrgs.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionData1TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionData1TCH"
	iso.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		iso.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.ClrChanl != nil {
		iso.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if v.Chrgs != nil {
		iso.AddError(&errs, baseName+".Chrgs", v.Chrgs.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionOfInvestigationV09) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionOfInvestigationV09"
	iso.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	iso.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	iso.AddError(&errs, baseName+".CxlDtls", v.CxlDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionOfInvestigationV09TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionOfInvestigationV09TCH"
	iso.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	iso.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	iso.AddError(&errs, baseName+".CxlDtls", v.CxlDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction22) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingTransaction22"
	iso.AddError(&errs, baseName+".OrgnlGrpInfAndSts", v.OrgnlGrpInfAndSts.Validate())
	if v.TxInfAndSts != nil {
		iso.AddError(&errs, baseName+".TxInfAndSts", v.TxInfAndSts.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction22TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingTransaction22TCH"
	iso.AddError(&errs, baseName+".OrgnlGrpInfAndSts", v.OrgnlGrpInfAndSts.Validate())
	if v.TxInfAndSts != nil {
		iso.AddError(&errs, baseName+".TxInfAndSts", v.TxInfAndSts.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := iso.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	if err := iso.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v ClearingChannel2Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "MPNS", "RTGS", "RTNS"); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationExecutionConfirmation1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "IPAY", "PECR", "RJCR"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPaymentCancellationRejection1Code) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "AC04", "AM04", "ARDT", "CUST", "LEGL", "NOAS", "NOOR"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPaymentCancellationRejection1CodeTCH) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "AC04", "AM04", "ARDT", "CUST", "LEGL", "NOAS", "NOOR"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := iso.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH2) Validate() error {
	if err := iso.ValidateMinLength(string(v), 9); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v OrigMsgName) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "camt.056.001.05", "camt.056.001.08"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := iso.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
