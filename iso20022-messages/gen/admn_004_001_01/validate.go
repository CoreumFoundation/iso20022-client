// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admn.004.001.01
package admn_004_001_01

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4ADMN"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2ADMN"
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".AdmnSignOffResp", v.AdmnSignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7ADMN"
	iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdr"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdrTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdrTCH"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResp) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SignOffResp"
	iso.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	iso.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.StsRsnInf != nil {
		iso.AddError(&errs, baseName+".StsRsnInf", v.StsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResponse) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SignOffResponse"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".SignOffResp", v.SignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResponseTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SignOffResponseTCH"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".SignOffResp", v.SignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffRespTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SignOffRespTCH"
	iso.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	iso.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.StsRsnInf != nil {
		iso.AddError(&errs, baseName+".StsRsnInf", v.StsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReason6Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatusReason6Choice"
	if v.Prtry != nil {
		iso.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatusReasonInformation8"
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation8TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatusReasonInformation8TCH"
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Min11Max11Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 11); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 11); err != nil {
		return err
	}
	return nil
}

func (v ProprietaryReasonCode) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "9946", "9948", "9964", "DS0H", "RC02"); err != nil {
		return err
	}
	return nil
}

func (v TransactionGroupStatus3CodeAdmin) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "ACTC", "RJCT"); err != nil {
		return err
	}
	return nil
}
