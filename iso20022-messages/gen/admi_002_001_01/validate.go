// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.002.001.01
package admi_002_001_01

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".Admi00200101", v.Admi00200101.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageReference) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageReference"
	iso.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageReferenceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageReferenceTCH"
	iso.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageRejectV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageRejectV01"
	iso.AddError(&errs, baseName+".RltdRef", v.RltdRef.Validate())
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageRejectV01TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageRejectV01TCH"
	iso.AddError(&errs, baseName+".RltdRef", v.RltdRef.Validate())
	iso.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RejectionReason2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RejectionReason2"
	iso.AddError(&errs, baseName+".RjctgPtyRsn", v.RjctgPtyRsn.Validate())
	if v.AddtlData != nil {
		iso.AddError(&errs, baseName+".AddtlData", v.AddtlData.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RejectionReason2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RejectionReason2TCH"
	iso.AddError(&errs, baseName+".RjctgPtyRsn", v.RjctgPtyRsn.Validate())
	if v.AddtlData != nil {
		iso.AddError(&errs, baseName+".AddtlData", v.AddtlData.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := iso.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])){2})[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}
