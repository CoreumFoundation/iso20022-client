// Code generated by GoComply XSD2Go for iso20022; DO NOT EDIT.
// Validations for urn:iso:std:ma:20022:tech:xsd:admn.008.001.01
package admn_008_001_01

import (
	"github.com/CoreumFoundation/iso20022-client/iso20022-messages/pkg/iso"
	"github.com/moov-io/base"
)

// XSD ComplexType validations

func (v AvailabilityParticipant) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AvailabilityParticipant"
	if v.PtcptSgnOff != nil {
		iso.AddError(&errs, baseName+".PtcptSgnOff", v.PtcptSgnOff.Validate())
	}
	if v.PtcptSspd != nil {
		iso.AddError(&errs, baseName+".PtcptSspd", v.PtcptSspd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityParticipantTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AvailabilityParticipantTCH"
	if v.PtcptSgnOff != nil {
		iso.AddError(&errs, baseName+".PtcptSgnOff", v.PtcptSgnOff.Validate())
	}
	if v.PtcptSspd != nil {
		iso.AddError(&errs, baseName+".PtcptSspd", v.PtcptSspd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityReport) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AvailabilityReport"
	if v.Cnnctn != nil {
		iso.AddError(&errs, baseName+".Cnnctn", v.Cnnctn.Validate())
	}
	if v.AvlbtyPtcpt != nil {
		iso.AddError(&errs, baseName+".AvlbtyPtcpt", v.AvlbtyPtcpt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityReportTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AvailabilityReportTCH"
	if v.Cnnctn != nil {
		iso.AddError(&errs, baseName+".Cnnctn", v.Cnnctn.Validate())
	}
	if v.AvlbtyPtcpt != nil {
		iso.AddError(&errs, baseName+".AvlbtyPtcpt", v.AvlbtyPtcpt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4ADMN"
	iso.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2ADMN"
	iso.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Connection) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Connection"
	for indx := range v.CnnctnId {
		iso.AddError(&errs, baseName+".CnnctnId", v.CnnctnId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ConnectionTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ConnectionTCH"
	for indx := range v.CnnctnId {
		iso.AddError(&errs, baseName+".CnnctnId", v.CnnctnId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseAvailabilityReport) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatabaseAvailabilityReport"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".DBRptRspn", v.DBRptRspn.Validate())
	iso.AddError(&errs, baseName+".AvlbtyRpt", v.AvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseAvailabilityReportTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatabaseAvailabilityReportTCH"
	iso.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	iso.AddError(&errs, baseName+".DBRptRspn", v.DBRptRspn.Validate())
	iso.AddError(&errs, baseName+".AvlbtyRpt", v.AvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseReportReponse) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatabaseReportReponse"
	iso.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	iso.AddError(&errs, baseName+".RptCd", v.RptCd.Validate())
	iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	iso.AddError(&errs, baseName+".TxSts", v.TxSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseReportReponseTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatabaseReportReponseTCH"
	iso.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	iso.AddError(&errs, baseName+".RptCd", v.RptCd.Validate())
	iso.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	iso.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	iso.AddError(&errs, baseName+".TxSts", v.TxSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	iso.AddError(&errs, baseName+".DBAvlbtyRpt", v.DBAvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7ADMN"
	iso.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdr"
	iso.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	iso.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSignOff) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ParticipantSignOff"
	for indx := range v.PtcptId {
		iso.AddError(&errs, baseName+".PtcptId", v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSignOffTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ParticipantSignOffTCH"
	for indx := range v.PtcptId {
		iso.AddError(&errs, baseName+".PtcptId", v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSuspended) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ParticipantSuspended"
	for indx := range v.PtcptId {
		iso.AddError(&errs, baseName+".PtcptId", v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSuspendedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ParticipantSuspendedTCH"
	for indx := range v.PtcptId {
		iso.AddError(&errs, baseName+".PtcptId", v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max20AlphaNumericText) Validate() error {
	if err := iso.ValidatePattern(string(v), `[a-zA-Z0-9]{1,20}`); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 20); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Min11Max11Text) Validate() error {
	if err := iso.ValidateMinLength(string(v), 11); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 11); err != nil {
		return err
	}
	return nil
}

func (v ReportCode) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "AVLBTY"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 6); err != nil {
		return err
	}
	return nil
}

func (v ReportCodeTCH) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "AVLBTY"); err != nil {
		return err
	}
	if err := iso.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := iso.ValidateMaxLength(string(v), 6); err != nil {
		return err
	}
	return nil
}

func (v TransactionIndividualStatus3CodeEcho) Validate() error {
	if err := iso.ValidateEnumeration(string(v), "ACTC"); err != nil {
		return err
	}
	return nil
}
